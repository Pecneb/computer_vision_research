# Kalman filter example demo in Python

# A Python implementation of the example given in pages 11-15 of "An
# Introduction to the Kalman Filter" by Greg Welch and Gary Bishop,
# University of North Carolina at Chapel Hill, Department of Computer
# Science, TR 95-041,
# https://www.cs.unc.edu/~welch/media/pdf/kalman_intro.pdf

# by Andrew D. Straw

import numpy as np
import matplotlib.pyplot as plt

plt.rcParams['figure.figsize'] = (10, 8)

# frame_ID_list = [970.0, 971.0, 972.0, 973.0, 974.0, 975.0, 976.0, 977.0, 978.0, 979.0, 980.0, 981.0, 982.0, 983.0, 984.0, 985.0, 986.0, 987.0, 988.0, 989.0, 990.0, 991.0, 992.0, 993.0, 994.0, 995.0, 996.0, 997.0, 998.0, 999.0, 1000.0, 1001.0, 1002.0, 1003.0, 1004.0, 1005.0, 1006.0, 1007.0, 1008.0, 1009.0, 1010.0, 1011.0, 1012.0, 1013.0, 1014.0, 1015.0, 1016.0, 1017.0, 1018.0, 1019.0, 1020.0, 1021.0, 1022.0, 1023.0, 1024.0, 1025.0, 1026.0, 1027.0, 1028.0, 1029.0, 1030.0, 1031.0, 1032.0, 1033.0, 1034.0, 1035.0, 1036.0, 1037.0, 1038.0, 1039.0, 1040.0, 1041.0, 1042.0, 1043.0, 1044.0, 1045.0, 1046.0, 1047.0, 1048.0, 1049.0, 1050.0, 1051.0, 1052.0, 1053.0, 1054.0, 1055.0, 1056.0, 1057.0, 1058.0, 1059.0, 1060.0, 1061.0, 1062.0, 1063.0, 1064.0, 1065.0, 1066.0, 1067.0, 1068.0, 1069.0, 1070.0, 1071.0, 1072.0, 1073.0, 1074.0]
# frame_ID_list = [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 89.0, 90.0, 91.0, 92.0, 93.0, 94.0, 95.0, 96.0, 97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0, 145.0, 146.0, 147.0, 148.0, 149.0, 150.0, 151.0, 152.0, 153.0, 154.0, 155.0, 156.0, 157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0, 196.0, 197.0, 198.0, 199.0, 200.0, 201.0, 202.0, 203.0, 204.0, 205.0, 206.0, 207.0, 208.0, 209.0, 210.0, 211.0, 212.0, 213.0, 214.0, 215.0, 216.0, 217.0, 218.0, 219.0, 220.0, 221.0, 222.0, 223.0, 224.0, 225.0, 226.0, 227.0, 228.0, 229.0, 230.0, 231.0, 232.0, 233.0, 234.0, 235.0, 236.0, 237.0, 238.0, 239.0, 240.0, 241.0, 242.0, 243.0, 244.0, 245.0, 246.0, 247.0, 248.0, 249.0, 250.0, 251.0, 252.0, 253.0, 254.0, 255.0, 256.0, 257.0, 258.0, 259.0, 260.0, 261.0, 262.0, 263.0, 264.0, 265.0, 266.0, 267.0, 268.0, 269.0, 270.0, 271.0, 272.0, 273.0, 274.0, 275.0, 276.0, 277.0, 278.0, 279.0, 280.0, 281.0, 282.0, 283.0, 284.0, 285.0, 286.0, 287.0, 288.0, 289.0, 290.0, 291.0, 292.0, 293.0, 294.0, 295.0, 296.0, 297.0, 298.0, 299.0, 300.0, 301.0, 302.0, 303.0, 304.0, 305.0, 306.0, 307.0, 308.0, 309.0, 310.0, 311.0, 312.0, 313.0, 314.0, 315.0, 316.0, 317.0, 318.0, 319.0, 320.0, 321.0, 322.0, 323.0, 325.0, 326.0, 327.0, 328.0, 329.0, 331.0, 332.0]
frame_ID_list = [1640.0, 1641.0, 1642.0, 1643.0, 1644.0, 1645.0, 1646.0, 1647.0, 1648.0, 1649.0, 1650.0, 1651.0, 1652.0, 1653.0, 1654.0, 1655.0, 1656.0, 1657.0, 1658.0, 1660.0, 1661.0, 1662.0, 1663.0, 1664.0, 1665.0, 1666.0, 1667.0, 1668.0, 1669.0, 1670.0, 1671.0, 1672.0, 1673.0, 1674.0, 1675.0, 1676.0, 1677.0, 1678.0, 1679.0, 1680.0, 1681.0, 1682.0, 1683.0, 1684.0, 1685.0, 1686.0, 1687.0, 1688.0, 1689.0, 1690.0, 1691.0, 1692.0, 1693.0, 1694.0, 1695.0, 1696.0, 1697.0, 1698.0, 1699.0, 1700.0, 1701.0, 1702.0, 1704.0, 1706.0, 1707.0, 1708.0, 1709.0, 1710.0, 1711.0, 1712.0, 1713.0, 1714.0, 1715.0, 1716.0, 1717.0, 1718.0, 1719.0, 1720.0, 1721.0, 1722.0, 1723.0, 1724.0, 1725.0, 1726.0, 1727.0, 1728.0, 1729.0, 1730.0, 1731.0, 1732.0, 1733.0, 1734.0, 1735.0, 1736.0, 1737.0, 1738.0, 1739.0, 1740.0, 1741.0, 1742.0, 1743.0, 1744.0, 1745.0, 1746.0, 1747.0, 1748.0, 1749.0, 1750.0, 1751.0, 1752.0, 1753.0, 1754.0, 1755.0, 1756.0, 1757.0, 1758.0, 1759.0, 1760.0, 1761.0, 1762.0, 1763.0, 1764.0, 1765.0, 1766.0, 1767.0, 1768.0, 1769.0, 1770.0, 1771.0, 1772.0, 1773.0, 1774.0, 1775.0, 1776.0, 1777.0, 1778.0, 1779.0, 1780.0, 1781.0, 1782.0, 1783.0, 1784.0, 1785.0, 1786.0, 1787.0, 1788.0, 1789.0, 1790.0, 1791.0, 1792.0, 1793.0, 1794.0, 1795.0, 1796.0, 1797.0, 1798.0, 1799.0, 1800.0, 1801.0, 1802.0, 1803.0, 1804.0, 1805.0, 1806.0, 1807.0, 1808.0, 1809.0, 1810.0, 1811.0, 1812.0, 1813.0, 1814.0, 1815.0, 1816.0, 1817.0, 1818.0, 1819.0, 1820.0, 1821.0, 1822.0, 1823.0, 1824.0, 1825.0, 1826.0, 1827.0, 1828.0, 1829.0, 1830.0, 1831.0, 1832.0, 1833.0, 1834.0, 1835.0, 1836.0, 1837.0, 1838.0, 1839.0, 1840.0, 1841.0, 1842.0, 1843.0, 1844.0, 1845.0, 1846.0, 1847.0, 1848.0, 1849.0, 1850.0, 1851.0, 1852.0, 1853.0, 1854.0, 1855.0, 1856.0, 1857.0, 1858.0, 1859.0, 1860.0, 1861.0, 1866.0, 1867.0, 1868.0]
# frame_ID_list = frame_ID_list - frame_ID_list[0]
# print(frame_ID_list)
# X = [1038.5, 1031.0, 1026.0, 1015.0, 1007.5, 1002.0, 995.0, 988.00006, 980.5, 975.0, 966.0, 960.0, 953.0, 946.99994, 940.0, 933.0, 925.0, 918.00006, 913.0, 908.0, 900.50006, 894.0, 890.5, 884.00006, 879.00006, 874.49994, 868.49994, 865.00006, 858.00006, 854.0, 848.49994, 844.0, 840.0, 835.0, 831.0, 825.0, 822.0, 818.5, 814.00006, 811.0, 805.0, 803.00006, 798.0, 796.0, 793.0, 789.00006, 785.50006, 782.0, 776.0, 774.00006, 772.5, 768.00006, 765.50006, 763.00006, 760.50006, 755.99994, 755.00006, 751.0, 748.5, 746.0, 744.49994, 742.5, 740.50006, 738.00006, 735.99994, 733.0, 731.0, 729.00006, 727.5, 724.5, 723.00006, 720.50006, 719.0, 716.99994, 715.0, 713.5, 711.0, 711.0, 706.99994, 706.99994, 705.0, 704.0, 703.0, 701.0, 699.5, 698.00006, 695.0, 690.0, 693.0, 691.0, 690.0, 690.0, 688.00006, 687.0, 685.0, 684.00006, 684.49994, 683.0, 681.0, 680.0, 678.5, 678.00006, 676.0, 675.0, 674.0]
X = [0.7354167103767395, 0.7354167103767395, 0.7354167103767395, 0.7354167103767395, 0.7354167103767395, 0.7354166852103339, 0.7354166852103339, 0.7347222659322951, 0.7347222612963782, 0.7347222612963782, 0.7347222566604614, 0.7347222566604614, 0.7347222566604614, 0.7347222473886278, 0.7347222473886278, 0.7333333492279053, 0.7333333492279053, 0.7333333492279053, 0.7333333492279053, 0.7333333492279053, 0.7333333492279053, 0.7333333492279053, 0.7333333492279053, 0.7333333492279053, 0.7333333492279053, 0.7333333492279053, 0.7333333492279053, 0.7333333492279053, 0.7333333492279053, 0.7333333445919885, 0.732638900147544, 0.7326388908757104, 0.7326388862397936, 0.7326388862397936, 0.7319444669617547, 0.7319444325235155, 0.7312500225173102, 0.7319444325235155, 0.7305556032392714, 0.7305556032392714, 0.7305555641651154, 0.7298611104488373, 0.7291666865348816, 0.7291666865348816, 0.7277777791023254, 0.7270833253860474, 0.7270833253860474, 0.7270833253860474, 0.7263888855775198, 0.7250000238418579, 0.7250000238418579, 0.7243055701255798, 0.7236111276679569, 0.7215278055932787, 0.7208333611488342, 0.7208333518770006, 0.7208333518770006, 0.7194444517294566, 0.7194444444444444, 0.7180555436346265, 0.7159722473886279, 0.7131944484180874, 0.7124999854299757, 0.7083333134651184, 0.7041667103767395, 0.7027778095669217, 0.7006944510671828, 0.6993055780728659, 0.6958333253860474, 0.6930555701255798, 0.6888888478279114, 0.6854166388511658, 0.6812499761581421, 0.6770833134651184, 0.6736111250188616, 0.6722222361299727, 0.6694444417953491, 0.6659722328186035, 0.6625000238418579, 0.6597222089767456, 0.6555555462837219, 0.6499999761581421, 0.6465277671813965, 0.644444465637207, 0.6388888955116272, 0.6347222328186035, 0.6291666626930237, 0.625, 0.620138943195343, 0.6159722208976746, 0.612500011920929, 0.6083333492279053, 0.6027777791023254, 0.5958333611488342, 0.5930555462837219, 0.588888943195343, 0.581944465637207, 0.5763888955116272, 0.5722222328186035, 0.5666666626930237, 0.5611111521720886, 0.5555555820465088, 0.5493055582046509, 0.5458333492279053, 0.5402777791023254, 0.5326388478279114, 0.5277777910232544, 0.5229166746139526, 0.5159722566604614, 0.5097222328186035, 0.5041666626930237, 0.49861112236976624, 0.48819446563720703, 0.48402777314186096, 0.4784722328186035, 0.47013887763023376, 0.46319442987442017, 0.4576388895511627, 0.45000001788139343, 0.4465278089046478, 0.43958333134651184, 0.4340277910232544, 0.4263888895511627, 0.4201388955116272, 0.41458335518836975, 0.40833333134651184, 0.40069445967674255, 0.3958333432674408, 0.3881944715976715, 0.3819444477558136, 0.37638890743255615, 0.36944445967674255, 0.3652777671813965, 0.3569444715976715, 0.3500000238418579, 0.3444444239139557, 0.3395833373069763, 0.3333333432674408, 0.32847222685813904, 0.32083335518836975, 0.3166666626930237, 0.3083333373069763, 0.3048611283302307, 0.2993055582046509, 0.29305556416511536, 0.2888888716697693, 0.284722238779068, 0.2777777910232544, 0.27291667461395264, 0.2666666805744171, 0.26249998807907104, 0.2569444477558136, 0.25138890743255615, 0.24583333084980646, 0.24374999751647314, 0.23750001192092896, 0.23333331942558289, 0.2291666716337204, 0.22361111640930176, 0.21805556118488312, 0.21388888359069824, 0.20972223579883575, 0.20694443583488464, 0.2013888955116272, 0.19583334028720856, 0.19166667759418488, 0.18888889253139496, 0.18333333730697632, 0.17916665971279144, 0.17500001192092896, 0.17083333432674408, 0.16597221791744232, 0.16249999403953552, 0.1597222238779068, 0.15625, 0.15347222983837128, 0.1458333283662796, 0.14305555820465088, 0.1388888955116272, 0.13680556416511536, 0.13333334028720856, 0.12916667759418488, 0.12777777016162872, 0.12361110746860504, 0.11875000596046448, 0.11319444328546524, 0.11041666567325592, 0.10833333432674408, 0.10555555671453476, 0.10347221791744232, 0.10000000149011612, 0.0986111099521319, 0.09652777661879858, 0.09236111127667956, 0.0895833334989018, 0.08611110597848892, 0.0833333358168602, 0.0798611119389534, 0.07708333432674408, 0.07361111789941788, 0.07152777910232544, 0.06805555522441864, 0.06666667014360428, 0.06319444626569748, 0.05833332985639572, 0.05625000223517418, 0.05347222089767456, 0.05138888955116272, 0.0486111119389534, 0.04583333432674408, 0.04375000298023224, 0.04097222164273262, 0.0381944440305233, 0.03680555894970894, 0.03541666641831398, 0.03194444254040718, 0.02916666492819786, 0.02777777798473835, 0.02777777798473835, 0.02777777798473835, 0.02777777798473835, 0.02777777798473835]
# Y = [545.0, 536.0, 521.5, 509.0, 496.99997, 488.0, 477.49997, 467.99997, 457.0, 447.5, 436.0, 427.0, 417.0, 406.99997, 399.5, 390.0, 381.5, 374.49997, 366.0, 358.0, 350.0, 342.5, 336.0, 329.5, 323.5, 316.5, 310.0, 305.0, 298.0, 292.5, 287.0, 282.0, 276.5, 271.0, 266.0, 262.5, 257.5, 253.00002, 250.5, 247.0, 242.5, 237.5, 233.99998, 230.50002, 225.5, 223.0, 219.49998, 215.5, 211.49998, 208.5, 204.5, 202.0, 200.5, 198.0, 194.0, 191.5, 188.0, 186.5, 183.5, 180.5, 178.5, 177.0, 174.5, 172.5, 170.0, 167.0, 165.5, 164.0, 161.5, 160.5, 157.5, 155.0, 153.5, 152.0, 149.5, 148.0, 146.5, 146.0, 144.0, 142.5, 141.0, 139.5, 138.5, 137.5, 135.5, 134.5, 133.0, 129.0, 129.5, 127.5, 126.0, 126.0, 124.5, 124.0, 121.5, 121.5, 119.5, 119.0, 118.0, 116.99999, 116.0, 115.0, 114.50001, 112.99999, 112.00001]
Y = [147.0, 147.0, 147.0, 147.0, 147.0, 147.0, 148.0, 147.0, 148.0, 149.0, 149.0, 152.0, 152.0, 149.0, 149.0, 148.0, 148.0, 149.0, 149.0, 148.0, 148.0, 148.0, 147.0, 147.0, 147.0, 147.0, 147.0, 147.0, 147.0, 147.0, 151.5, 152.0, 153.5, 152.5, 153.0, 152.5, 153.0, 153.5, 153.5, 153.5, 149.0, 148.0, 149.0, 149.0, 149.0, 149.0, 151.00002, 151.00002, 152.0, 151.5, 153.0, 154.0, 154.0, 153.5, 151.5, 153.0, 151.5, 151.00002, 152.0, 152.5, 153.0, 153.5, 154.5, 155.0, 157.0, 157.0, 157.0, 157.5, 159.0, 159.5, 160.0, 159.5, 160.0, 160.0, 160.5, 161.0, 161.0, 162.5, 162.0, 163.5, 163.0, 164.5, 164.0, 165.0, 165.49998, 166.5, 167.5, 167.5, 167.5, 167.99998, 168.5, 169.50002, 170.0, 171.00002, 171.5, 172.5, 174.0, 174.0, 175.0, 175.5, 177.00002, 178.5, 180.49998, 182.50002, 183.0, 183.99998, 185.0, 186.5, 187.5, 188.0, 188.99998, 189.50002, 191.0, 191.0, 191.5, 193.50002, 195.5, 195.5, 204.5, 204.0, 205.00002, 208.50002, 207.99998, 214.0, 215.5, 218.5, 221.00002, 225.0, 227.0, 231.00002, 233.99998, 236.5, 238.0, 242.00002, 247.99998, 250.00002, 254.5, 258.5, 265.0, 270.0, 273.5, 278.0, 279.50003, 283.5, 289.5, 292.0, 298.50003, 304.0, 306.5, 313.5, 316.5, 328.0, 333.0, 337.5, 342.00003, 348.0, 354.00003, 358.49997, 365.00003, 368.5, 378.5, 383.49997, 388.0, 395.0, 404.00003, 412.0, 418.5, 423.5, 430.0, 437.5, 444.5, 452.00003, 458.5, 466.0, 473.49997, 481.0, 489.0, 498.0, 505.0, 512.0, 520.0, 527.5, 535.0, 542.0, 551.0, 558.0, 567.5, 574.50006, 584.0, 593.5, 601.0, 609.0, 617.0, 626.0, 636.0, 638.5, 648.0, 663.00006, 670.0, 679.0, 681.0, 696.5, 703.0, 714.0, 721.99994, 729.00006, 727.0, 743.5, 755.00006, 751.0, 759.5, 776.0, 789.00006, 791.0, 804.5, 796.0, 821.5, 829.0, 818.0, 844.0, 850.0, 858.5, 865.00006, 873.00006, 879.00006, 886.0, 891.5, 898.00006, 906.0, 912.0, 918.00006, 926.0, 931.0, 935.5, 941.00006, 948.00006, 953.0, 959.0, 964.0, 969.49994, 974.5, 979.5, 984.0, 988.00006, 993.00006, 997.0, 1001.0, 1005.99994, 1011.0, 1014.49994, 1018.0, 1022.0, 1026.0, 1030.0, 1034.5, 1037.0, 1041.0, 1044.0, 1047.0, 1050.5001, 1054.0, 1057.0, 1060.0, 1063.0, 1067.0, 1071.0, 1073.0001, 1075.0, 1077.0, 1081.0, 1084.0, 1086.0, 1089.0, 1093.0, 1094.0, 1096.0, 1097.0, 1100.0, 1103.0, 1104.0001, 1107.0, 1109.0, 1111.0, 1113.0, 1115.0, 1117.0, 1119.0, 1121.0, 1123.0, 1124.0, 1126.0, 1127.0, 1129.0, 1131.0, 1133.0, 1135.0, 1137.0, 1138.0, 1139.0, 1141.0, 1142.0, 1143.0001, 1144.0, 1146.0, 1147.0, 1148.0, 1149.0001, 1151.0, 1152.0, 1152.0, 1154.0, 1155.0, 1156.0, 1158.0, 1159.0, 1160.0, 1161.0, 1162.0, 1163.0001, 1163.0001, 1165.0, 1167.0, 1167.0, 1168.0, 1169.0, 1169.0, 1170.0, 1170.0, 1172.0, 1173.0]

# intial parameters
# n_iter = 50
n_iter = len(X)
# sz = (n_iter,) # size of array
# sz = np.size(X)
sz = int(frame_ID_list[-1] - frame_ID_list[0])
print(len(frame_ID_list),len(X), len(Y), sz)
# exit(0)
# x = -0.37727 # truth value (typo in example at top of p. 13 calls this z)
# x = X[0]
# z = np.random.normal(x,0.1,size=sz) # observations (normal about x, sigma=0.1)
# z = X

# Q = 1e-2 # process variance

frame_ID_list_full = list(range(int(frame_ID_list[0]),int(frame_ID_list[-1]+1)))
X_full = np.interp(frame_ID_list_full, frame_ID_list, X)


# allocate space for arrays
# xhat=np.zeros(sz)      # a posteri estimate of x
# P=np.zeros(sz)         # a posteri error estimate
# xhatminus=np.zeros(sz) # a priori estimate of x
# Pminus=np.zeros(sz)    # a priori error estimate
# K=np.zeros(sz)         # gain or blending factor

# R = 0.1**2 # estimate of measurement variance, change to see effect

# intial guesses
# xhat[0] = X[0]
# P[0] = X[0]

for k in range(1,sz):
#     # time update
#     xhatminus[k] = xhat[k-1]
#     Pminus[k] = P[k-1]+Q

#     # measurement update
#     K[k] = Pminus[k]/( Pminus[k]+R )
    if k + frame_ID_list[0] not in frame_ID_list:
#         xhat[k] = xhatminus[k]+K[k]*(z[k]-xhatminus[k])
#     else:
#         # z = z[:k]+[xhatminus[k]+K[k]]+z[k:]
#         if k >= 1:
#             z = z[:k]+[xhatminus[k]+(xhatminus[k]-xhatminus[k-1])]+z[k:]
#         else:
#             z = z[:k]+[xhatminus[k]+(xhatminus[k]-xhatminus[0])]+z[k:]
        X = X[:k]+[0]+X[k:]
#         print(len(z))
#         xhat[k] = xhatminus[k]+K[k]*(z[k]-xhatminus[k])
#     P[k] = (1-K[k])*Pminus[k]

plt.figure()
plt.plot(X,'k+',label='noisy measurements')
plt.plot(X_full,'b-',label='a posteri estimate')
# plt.axhline(x,color='g',label='truth value')
plt.legend()
plt.title('Estimate vs. iteration step', fontweight='bold')
plt.xlabel('Iteration')
plt.ylabel('Voltage')

plt.figure()
valid_iter = range(1,n_iter) # Pminus not valid at step 0
# plt.plot(valid_iter,Pminus[valid_iter],label='a priori error estimate')
plt.title('Estimated $\it{\mathbf{a \ priori}}$ error vs. iteration step', fontweight='bold')
plt.xlabel('Iteration')
plt.ylabel('$(Voltage)^2$')
plt.setp(plt.gca(),'ylim',[0,.01])
plt.show()